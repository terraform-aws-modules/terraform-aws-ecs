module "wrapper" {
  source = "../../modules/task"

  for_each = var.items

  create                                = try(each.value.create, var.defaults.create, true)
  region                                = try(each.value.region, var.defaults.region, null)
  tags                                  = try(each.value.tags, var.defaults.tags, {})
  name                                  = try(each.value.name, var.defaults.name, null)
  enable_execute_command                = try(each.value.enable_execute_command, var.defaults.enable_execute_command, false)
  create_task_definition                = try(each.value.create_task_definition, var.defaults.create_task_definition, true)
  task_definition_arn                   = try(each.value.task_definition_arn, var.defaults.task_definition_arn, null)
  container_definitions                 = try(each.value.container_definitions, var.defaults.container_definitions, {})
  cpu                                   = try(each.value.cpu, var.defaults.cpu, 1024)
  enable_fault_injection                = try(each.value.enable_fault_injection, var.defaults.enable_fault_injection, null)
  ephemeral_storage                     = try(each.value.ephemeral_storage, var.defaults.ephemeral_storage, null)
  family                                = try(each.value.family, var.defaults.family, null)
  ipc_mode                              = try(each.value.ipc_mode, var.defaults.ipc_mode, null)
  memory                                = try(each.value.memory, var.defaults.memory, 2048)
  network_mode                          = try(each.value.network_mode, var.defaults.network_mode, "awsvpc")
  pid_mode                              = try(each.value.pid_mode, var.defaults.pid_mode, null)
  proxy_configuration                   = try(each.value.proxy_configuration, var.defaults.proxy_configuration, null)
  requires_compatibilities              = try(each.value.requires_compatibilities, var.defaults.requires_compatibilities, ["FARGATE"])
  runtime_platform                      = try(each.value.runtime_platform, var.defaults.runtime_platform, { operating_system_family = "LINUX", cpu_architecture = "X86_64" })
  skip_destroy                          = try(each.value.skip_destroy, var.defaults.skip_destroy, null)
  task_definition_placement_constraints = try(each.value.task_definition_placement_constraints, var.defaults.task_definition_placement_constraints, null)
  track_latest                          = try(each.value.track_latest, var.defaults.track_latest, true)
  volume                                = try(each.value.volume, var.defaults.volume, null)
  task_tags                             = try(each.value.task_tags, var.defaults.task_tags, {})

  # Task Execution IAM role
  create_task_exec_iam_role               = try(each.value.create_task_exec_iam_role, var.defaults.create_task_exec_iam_role, true)
  task_exec_iam_role_arn                  = try(each.value.task_exec_iam_role_arn, var.defaults.task_exec_iam_role_arn, null)
  task_exec_iam_role_name                 = try(each.value.task_exec_iam_role_name, var.defaults.task_exec_iam_role_name, null)
  task_exec_iam_role_use_name_prefix      = try(each.value.task_exec_iam_role_use_name_prefix, var.defaults.task_exec_iam_role_use_name_prefix, true)
  task_exec_iam_role_path                 = try(each.value.task_exec_iam_role_path, var.defaults.task_exec_iam_role_path, null)
  task_exec_iam_role_description          = try(each.value.task_exec_iam_role_description, var.defaults.task_exec_iam_role_description, null)
  task_exec_iam_role_permissions_boundary = try(each.value.task_exec_iam_role_permissions_boundary, var.defaults.task_exec_iam_role_permissions_boundary, null)
  task_exec_iam_role_tags                 = try(each.value.task_exec_iam_role_tags, var.defaults.task_exec_iam_role_tags, {})
  task_exec_iam_role_policies             = try(each.value.task_exec_iam_role_policies, var.defaults.task_exec_iam_role_policies, {})
  task_exec_iam_role_max_session_duration = try(each.value.task_exec_iam_role_max_session_duration, var.defaults.task_exec_iam_role_max_session_duration, null)
  create_task_exec_policy                 = try(each.value.create_task_exec_policy, var.defaults.create_task_exec_policy, true)
  task_exec_ssm_param_arns                = try(each.value.task_exec_ssm_param_arns, var.defaults.task_exec_ssm_param_arns, [])
  task_exec_secret_arns                   = try(each.value.task_exec_secret_arns, var.defaults.task_exec_secret_arns, [])
  task_exec_iam_statements                = try(each.value.task_exec_iam_statements, var.defaults.task_exec_iam_statements, null)
  task_exec_iam_policy_path               = try(each.value.task_exec_iam_policy_path, var.defaults.task_exec_iam_policy_path, null)

  # Tasks IAM role
  create_tasks_iam_role               = try(each.value.create_tasks_iam_role, var.defaults.create_tasks_iam_role, true)
  tasks_iam_role_arn                  = try(each.value.tasks_iam_role_arn, var.defaults.tasks_iam_role_arn, null)
  tasks_iam_role_name                 = try(each.value.tasks_iam_role_name, var.defaults.tasks_iam_role_name, null)
  tasks_iam_role_use_name_prefix      = try(each.value.tasks_iam_role_use_name_prefix, var.defaults.tasks_iam_role_use_name_prefix, true)
  tasks_iam_role_path                 = try(each.value.tasks_iam_role_path, var.defaults.tasks_iam_role_path, null)
  tasks_iam_role_description          = try(each.value.tasks_iam_role_description, var.defaults.tasks_iam_role_description, null)
  tasks_iam_role_permissions_boundary = try(each.value.tasks_iam_role_permissions_boundary, var.defaults.tasks_iam_role_permissions_boundary, null)
  tasks_iam_role_tags                 = try(each.value.tasks_iam_role_tags, var.defaults.tasks_iam_role_tags, {})
  tasks_iam_role_policies             = try(each.value.tasks_iam_role_policies, var.defaults.tasks_iam_role_policies, {})
  tasks_iam_role_statements           = try(each.value.tasks_iam_role_statements, var.defaults.tasks_iam_role_statements, null)
}
